<?php

namespace App\Http\Requests;

use App\Models\Setting;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\App;

class ClientRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        /* the next two lines to check if this request for update or store method */
        // $id =  $this->route()->test_info ?? 'NULL';
        $id =  $this->client ?? 'NULL';

        $lang = $this->header('lang');
        App::setlocale($lang);
        $ClientMobileUnique = (Setting::where('key','ClientMobileUnique')->first() != NULL) ? Setting::where('key','ClientMobileUnique')->first()->value : 0;

        $rules = [
            'national_id' => [
                'nullable',
                "unique:clients,national_id,$id,id",
            ],
            'social_user_id' => [
                'exists:social_users,id,deleted_at,NULL',
            ],
            'national_id_type_id' => [
                'nullable',
                'exists:national_id_types,id,deleted_at,NULL',
            ],
            'client_id' => [
                'nullable',
                'exists:clients,id,deleted_at,NULL',
            ],
            'client_type_id' => [
                'nullable',
                'exists:client_types,id,deleted_at,NULL',
            ],
            'nationality_id' => [
                'nullable',
                'exists:nationalities,id,deleted_at,NULL',
            ],
            'name' => ['required', 'string'],
            'mobile' => ['nullable' ,
                ($ClientMobileUnique) ? "unique:clients,mobile,$id,id" : ""
            ],
            'telephone' => ['nullable'],
            'gender' => ['nullable', 'in:male,female'],
            'email' => ['nullable', 'string', 'email', 'max:255',
                "unique:clients,email,$id,id,deleted_at,NULL"],
            'birthdate' => ['nullable', 'date_format:Y-m-d', 'before:today'],
            'ministry_member' => ['nullable', 'boolean'],

            // pivot table client_hospitals
            'hospitals' => [
                'array'
            ],
            'hospitals.*.hospital_id' => [
                'exists:hospitals,id,deleted_at,NULL',
            ],
            'hospitals.*.creation_date' => [
                'nullable',
                'date_format:Y-m-d'
            ],
            'hospitals.*.expiration_date' => [
                'nullable',
                'date_format:Y-m-d',
            ],
            'country_id' => [
                'nullable',
                'exists:countries,id,deleted_at,NULL',
            ],
            'region_id' => [
                'nullable',
                "exists:regions,id,deleted_at,NULL,country_id,$this->country_id",
            ],
            'city_id' => [
                'nullable',
                "exists:cities,id,deleted_at,NULL,country_id,$this->country_id,region_id,$this->region_id",
            ],
            'id_endDate' => [
                'nullable',
                'date',
                'date_format:Y-m-d',
            ],
            'company_id' => [
                'nullable',
                'exists:companies,id,deleted_at,NULL',
            ],

            //'added_by' => ['required', 'in:system,portal'],
            /*'hospitals.*.file_number' => [
                'required',
                'numeric',
                "unique:client_hospitals,file_number,$id,id,hospital_id,".array_pluck($this->hospitals, 'hospital_id').",deleted_at,NULL"
            ],*/
        ];

        $merge = [];
        $checkAllowBenfFiles = Setting::where('key','Allow_MultiBeneficiaries_Files')->first()->value;
        if($checkAllowBenfFiles) {
            if ($this->has('hospitals') && !empty($this->hospitals)) {
                foreach ($this->hospitals as $key => $value) {
                    $merge["hospitals.$key.file_number"] = [
                        'required',
                        'numeric',
                        "unique:client_hospitals,file_number,$id,client_id,hospital_id," . $this->hospitals[$key]['hospital_id'] . ",deleted_at,NULL"
                    ];
                }
            }
        }

        return array_merge($rules, $merge);
    }



    public function messages()
    {
        $language  = app()->getLocale();

        $messages = [];
        if ($this->has('hospitals') && !empty($this->hospitals)) {
            foreach ($this->hospitals as $key => $value) {
                $unique_error  = 'File #'.$this->hospitals[$key]['file_number'].' used before';

                if($language == 'ar'){
                    $unique_error = 'ملف رقم '. $this->hospitals[$key]['file_number'] .' مستخدم من قبل ';
                }

                $messages['hospitals.' . $key . '.file_number'.'.unique'] = $unique_error ;
                $indexPlus1 = $key+1;
                $required_error = 'File #'.$indexPlus1.' is required';
                if($language == 'ar'){
                    $required_error = 'ملف  '. $indexPlus1 .' مطلوب  ';
                }
                $messages['hospitals.' . $key . '.file_number'.'.required'] = $required_error;
            }
        }
        return $messages;
    }



}
